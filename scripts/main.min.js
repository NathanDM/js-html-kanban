var Columns = [
    {
//        "content":{},
        "nodeId": 898734,
        "type": "BacklogNode",
//        "x":10.0,
//        "y":2.0,
        "width": 420.0,
//        "height":1613.0,
//        "scaleX":1.0,
//        "scaleY":1.0,
        "parentId": 898734,
        "projectId": 62,
//        "children":[],

        "displayOrder" : 0      //New !!
//        "zindex": "6"
    },
    {
        "nodeId": 898735,
        "type": "User",
        "width": 420.0,
        "parentId": 898734,
        "projectId": 62,
        "displayOrder" : 0
    },{
        "nodeId": 898736,
        "type": "ToDoNode",
        "width": 420.0,
        "parentId": 898734,
        "projectId": 62,
        "displayOrder" : 1
    },
    {
        "nodeId": 898737,
        "type": "WIP",
        "width": 420.0,
        "parentId": 898734,
        "projectId": 62,
        "displayOrder" : 2
    },
    {
        "nodeId": 898738,
        "type": "test",
        "width": 420.0,
        "parentId": 898734,
        "projectId": 62,
        "displayOrder" : 3
    },
    {
        "nodeId": 898739,
        "type": "DOne",
        "width": 420.0,
        "parentId": 898734,
        "projectId": 62,
        "displayOrder" : 4
    }
    ,
    {
        "nodeId": 898739,
        "type": "DOne",
        "width": 420.0,
        "parentId": 898734,
        "projectId": 62,
        "displayOrder" : 4
    }
    ,
    {
        "nodeId": 898739,
        "type": "DOne",
        "width": 420.0,
        "parentId": 898734,
        "projectId": 62,
        "displayOrder" : 4
    }
    ,
    {
        "nodeId": 898739,
        "type": "DOne",
        "width": 420.0,
        "parentId": 898734,
        "projectId": 62,
        "displayOrder" : 4
    }
    ,
    {
        "nodeId": 898739,
        "type": "DOne",
        "width": 420.0,
        "parentId": 898734,
        "projectId": 62,
        "displayOrder" : 4
    }
    ,
    {
        "nodeId": 898739,
        "type": "DOne",
        "width": 420.0,
        "parentId": 898734,
        "projectId": 62,
        "displayOrder" : 4
    }
    ,
    {
        "nodeId": 898739,
        "type": "DOne",
        "width": 420.0,
        "parentId": 898734,
        "projectId": 62,
        "displayOrder" : 4
    }

]
var ProjectUsers = [
    {
        "id": 16034,
        "login": "akchatur",
        "lastName": "CHATURVEDI",
        "firstName": "AKHILESH"
    },
    {
        "id": 3707,
        "login": "aliagre",
        "lastName": "LIAGRE",
        "firstName": "Alexandre"
    },
    {
        "id": 10410,
        "login": "adargoeu",
        "lastName": "DARGOEUVES",
        "firstName": "Antoine"
    },
    {
        "id": 1825,
        "login": "aechevin",
        "lastName": "ECHEVIN",
        "firstName": "Arnauld"
    },
    {
        "id": 11858,
        "login": "achardev",
        "lastName": "CHARDEVEL",
        "firstName": "Axel"
    }
];
"use strict";

var KanbanDragManager = {
    onSelectItem: function (e) {
        //Store the selectedNode
        this.state.selectedNode = e.currentTarget;
        var parent = this.state.selectedNode.parentNode;
        //get the initial position of the node
        var offsetLeft = this.state.selectedNode.offsetLeft;
        var offsetTop = this.state.selectedNode.offsetTop;

        //Change the mouse cursor
        this.state.selectedNode.className += " grabbing";

        //store the mouse offset on the node
        this.state.offsetX = e.clientX - offsetLeft;
        this.state.offsetY = e.clientY - offsetTop;
    },

    onMove: function (e) {
        if (this.state.selectedNode) {
            //Move Node
            //Todo : manage right and bot (idea : let see if we can not manage this with css and scrollbar
            if (e.clientY - this.state.offsetY < 50 ) {
                this.state.selectedNode.style.top = e.clientY  - this.state.offsetY + "px";
            }
            if (e.clientX - this.state.offsetX < 0 ) {
                this.state.selectedNode.style.left = e.clientX - this.state.offsetX + "px";
            }
        }
    },
    onDeselectItem: function (e) {
        if (this.state.selectedNode) {
            //Manage special element (ei.SVG)
            if (this.state.selectedNode.className.replace) {
                this.state.selectedNode.className = this.state.selectedNode.className.replace(" grabbing", "");
            }
        }
        this.state.selectedNode = null;
        this.state.offsetX = 0;
        this.state.offsetY = 0;

    }
}

"use strict";

var StickyDragManager = {
    onSelectItem: function (e) {
        //Store the selectedNode
        this.state.selectedNode = e.currentTarget;
        var parent = this.state.selectedNode.parentNode;
        //get the initial position of the node
        var offsetLeft = this.state.selectedNode.offsetLeft;
        var offsetTop = this.state.selectedNode.offsetTop;

        //Put the node in the foreground
        parent.removeChild(this.state.selectedNode);
        parent.appendChild(this.state.selectedNode);

        //Change the mouse cursor
        this.state.selectedNode.className += " grabbing rotate";

        //store the mouse offset on the node
        this.state.offsetX = (e.clientX / this.state.scale )- offsetLeft;
        this.state.offsetY = (e.clientY / this.state.scale ) - offsetTop;
    },

    onMove: function (e) {
        if (this.state.selectedNode &&
            ( this.state.selectedNode.style.top = (e.clientY / this.state.scale ) - this.state.offsetY + "px"
                || this.state.selectedNode.style.left !== (e.clientX / this.state.scale )- this.state.offsetX + "px" )) {
            //Move Node
            this.state.selectedNode.style.top = (e.clientY / this.state.scale ) - this.state.offsetY + "px";
            this.state.selectedNode.style.left = (e.clientX / this.state.scale ) - this.state.offsetX + "px";
            e.stopPropagation();
        }
    },

    onDeselectItem: function (e) {
        //Manage special element (ei.SVG)
        if (this.state.selectedNode.className.replace) {
            this.state.selectedNode.className = this.state.selectedNode.className.replace("grabbing rotate", "");
        }

        this.state.selectedNode = null;
        this.state.offsetX = 0;
        this.state.offsetY = 0;
//        e.stopPropagation();
    }

}

"use strict";

var Draggable = {
    onMouseDown : function (e) {
        this.props.dragBoard.onSelectItem(e);
    },
    onMouseUp: function(e) {
        this.props.dragBoard.onDeselectItem(e);
    }
}

"use strict";

var Scallable = {

    manageZoom: function (e) {
        this.refs.scallable.state.scale = e.currentTarget.value / 100;
        React.findDOMNode(this.refs.scallable).style.transform = "scale(" + this.refs.scallable.state.scale  + ", " + this.refs.scallable.state.scale  + ")";
    }
}

"use strict"

/**
 * This class builds the react Application.
 *
 * @author $Author$
 */

var App = React.createClass({displayName: "App",
    mixins:[Scallable],

    getInitialState : function () {
        return {};
    },

    render: function() {
        return (
            React.createElement("div", null, 
                React.createElement(Header, null), 
                React.createElement(Kanban, {ref: "scallable"}), 
                React.createElement("input", {className: "zoom", type: "range", min: "60", max: "200", defaultValue: "100", onChange: this.manageZoom, step: "10"})
            )
            );
    }
});

"use strict"

/**
 * This class builds the header menu
 *
 * @author $Author$
 */
var Header = React.createClass({displayName: "Header",
    getInitialState: function () {
        return {isZoomed: false};
    },
    render: function () {
        return (
            React.createElement("div", {className: "header"}, 
                React.createElement("div", {className: "topBar"}


                )
            )
            );
    }
});

"use strict";

/**
 * This class builds the new Kanban.
 *
 * @author $Author$
 */
var Kanban = React.createClass({displayName: "Kanban",

    mixins : [StickyDragManager],
    getInitialState: function () {
        var retval = {};
        retval.columns = Columns;
        retval.users = ProjectUsers;
        retval.scale=1;
        return retval
    },
    render: function() {
        var color = "#f9f9f9",
            y = 0;

        return (
            React.createElement("div", {className: "kanban", onMouseUp: this.onDeselectItem, onMouseMove: this.onMove}, 

                this.state.users.map(function (item, i) {
                        color = color === "white" ? "#f9f9f9" : "white";
                        y += 150;

                        return (React.createElement(User, {x: "425", y: y, item: item, key: i}, " "));
                    }
                ), 

                this.state.columns.map(function (item, i) {
                        color = color === "white" ? "#f9f9f9" : "white";
                        return (React.createElement(Column, {height: y + 150, color: color, title: item.type, key: i}, " "));
                    }
                ), 

                React.createElement(Sticky, {x: "75", y: "100", className: "info", dragBoard: this}), 
                React.createElement(Sticky, {x: "50", y: "150", className: "default", dragBoard: this}), 
                React.createElement(Sticky, {x: "50", y: "200", className: "danger", dragBoard: this}), 
                React.createElement(Sticky, {x: "50", y: "250", className: "success", dragBoard: this}), 
                React.createElement(Sticky, {x: "50", y: "300", className: "warn", dragBoard: this})
            )
            );
    }
});

"use strict";

/**
 * This class manage a StickyNote component
 *
 * @author $Author$
 */
var Sticky = React.createClass({displayName: "Sticky",
    mixins: [Draggable],
    getInitialState : function () {
        return {offsetX:0, offsetY:0};
    },
    render: function() {
        var css = {
            top: this.props.y + "px",
            left: this.props.x + "px"
        }
        return (
            React.createElement("div", {className: this.props.className + " sticky", style: css, onMouseDown: this.onMouseDown, onMouseUp: this.onMouseUp}, " ")
            );
    }
});

"use strict";

/**
 * This class manage a Column component
 *
 * @author $Author$
 */
var Column = React.createClass({displayName: "Column",
    getInitialState: function () {
        return {displayOrder: 0};
    },
    render: function () {
        var css = {
            height: this.props.height,
            backgroundColor: this.props.color
        }
        return (
            React.createElement("div", {className: "column", style: css}, 
                React.createElement("h3", null, this.props.title)
            )
            );
    }
});

"use strict";

/**
 * This class manage a User component
 *
 * @author $Author$
 */
var User = React.createClass({displayName: "User",
    getInitialState: function () {
        return {displayOrder: 0};
    },
    render: function () {
        var css = {
            top: this.props.y + "px",
            left: this.props.x + "px"
        }
        return (
            React.createElement("div", {className: "row", style: css}, 
                React.createElement("h3", null, this.props.item.firstName)
            )
            );
    }
});

/*!
 *
 *  Web Starter Kit
 *  Copyright 2015 Google Inc. All rights reserved.
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *    https://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License
 *
 */
(function () {
  'use strict';

    React.render(React.createElement(App), document.getElementById('content'));


    // Check to make sure service workers are supported in the current browser,
  // and that the current page is accessed from a secure origin. Using a
  // service worker from an insecure origin will trigger JS console errors. See
  // http://www.chromium.org/Home/chromium-security/prefer-secure-origins-for-powerful-new-features
  if ('serviceWorker' in navigator &&
      (window.location.protocol === 'https:' ||
       window.location.hostname === 'localhost' ||
       window.location.hostname.indexOf('127.') === 0)) {
    navigator.serviceWorker.register('/service-worker.js', {
      scope: './'
    }).then(function(registration) {
      // Check to see if there's an updated version of service-worker.js with
      // new files to cache:
      // https://slightlyoff.github.io/ServiceWorker/spec/service_worker/index.html#service-worker-registration-update-method
      if (typeof registration.update === 'function') {
        registration.update();
      }

      // updatefound is fired if service-worker.js changes.
      registration.onupdatefound = function () {
        // updatefound is also fired the very first time the SW is installed,
        // and there's no need to prompt for a reload at that point.
        // So check here to see if the page is already controlled,
        // i.e. whether there's an existing service worker.
        if (navigator.serviceWorker.controller) {
          // The updatefound event implies that registration.installing is set:
          // https://slightlyoff.github.io/ServiceWorker/spec/service_worker/index.html#service-worker-container-updatefound-event
          var installingWorker = registration.installing;

          installingWorker.onstatechange = function () {
            switch (installingWorker.state) {
              case 'installed':
                // At this point, the old content will have been purged and the
                // fresh content will have been added to the cache.
                // It's the perfect time to display a "New content is
                // available; please refresh." message in the page's interface.
                break;

              case 'redundant':
                throw new Error('The installing ' +
                                'service worker became redundant.');
            }
          };
        }
      };
    }).catch(function (e) {
      console.error('Error during service worker registration:', e);
    });
  }

  // Your custom JavaScript goes here
})();
